

import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

from .config import get_settings
from .db import init_db, set_persona as db_set_persona, get_persona as db_get_persona, add_message, get_recent_messages
from .personas import get_persona, PERSONAS
from .services_gpt import GPTService
from .services_flux import FluxService

# Configure logging
logger = logging.getLogger(__name__)

logger.info("üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
settings = get_settings()

# Validate settings
if not settings.telegram_bot_token:
    logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    raise ValueError("TELEGRAM_BOT_TOKEN is required")
if not settings.openai_api_key:
    logger.error("‚ùå OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    raise ValueError("OPENAI_API_KEY is required")

logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:")
logger.info(f"   - Bot token: {settings.telegram_bot_token[:10]}...")
logger.info(f"   - OpenAI key: {settings.openai_api_key[:10]}...")
logger.info(f"   - WebApp URL: {settings.webapp_url}")
logger.info(f"   - Database: {settings.database_path}")

logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
bot = Bot(token=settings.telegram_bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

logger.info("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GPT —Å–µ—Ä–≤–∏—Å–∞...")
gpt_service = GPTService()
logger.info("üé® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flux —Å–µ—Ä–≤–∏—Å–∞...")
flux_service = FluxService()


def webapp_keyboard() -> ReplyKeyboardMarkup:
    # Use a placeholder HTTPS URL for development
    webapp_url = settings.webapp_url
    if webapp_url.startswith("http://localhost"):
        # For development, use a placeholder HTTPS URL
        webapp_url = "https://example.com"  # Placeholder
    
    wa = WebAppInfo(url=webapp_url)
    btn = KeyboardButton(text="Mini Uygulama / –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=wa)
    return ReplyKeyboardMarkup(keyboard=[[btn]], resize_keyboard=True)


def persona_selection_keyboard() -> InlineKeyboardMarkup:
    """Fallback keyboard with persona selection buttons"""
    buttons = []
    for persona in PERSONAS.values():
        buttons.append([
            InlineKeyboardButton(
                text=f"{persona.name_tr} / {persona.name_ru}",
                callback_data=f"select_persona:{persona.code}"
            )
        ])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@dp.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    logger.info(f"üë§ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
    
    text = (
        "Merhaba! Benimle hayalindeki kƒ±zƒ± se√ß ve sohbet etmeye ba≈üla.\n"
        "T√ºm mesajlar √∂nce T√ºrk√ße, sonra aynƒ± mesajda Rus√ßa kopyalanƒ±r.\n\n"
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–≤—É—à–∫—É –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –Ω–∞—á–Ω–∏ –æ–±—â–µ–Ω–∏–µ.\n"
        "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞ –Ω–∞ —Ç—É—Ä–µ—Ü–∫–æ–º, –∑–∞—Ç–µ–º –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
    )
    
    # Try WebApp keyboard first, fallback to inline keyboard
    try:
        await message.answer(text, reply_markup=webapp_keyboard())
        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ WebApp –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è WebApp –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è {user_id}, –∏—Å–ø–æ–ª—å–∑—É–µ–º inline: {e}")
        # If WebApp fails, use inline keyboard
        await message.answer(
            text + "\n\nMini App –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–≤—É—à–∫—É –Ω–∏–∂–µ:",
            reply_markup=persona_selection_keyboard()
        )


@dp.callback_query(lambda c: c.data.startswith("select_persona:"))
async def on_persona_selection(callback_query):
    """Handle persona selection from inline keyboard"""
    user_id = callback_query.from_user.id
    persona_code = callback_query.data.split(":")[1]
    logger.info(f"üíÉ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –ø–µ—Ä—Å–æ–Ω—É: {persona_code}")
    
    persona = get_persona(persona_code)
    
    if persona:
        db_set_persona(str(callback_query.from_user.id), persona.code)
        logger.info(f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞ {persona_code} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {user_id}")
        await callback_query.message.edit_text(
            f"Se√ßildi: {persona.name_tr} ‚Äî {persona.tagline_tr}.\n"
            "Sohbete ba≈ülayabiliriz! 'selfie' istersen s√∂yle.\n\n"
            f"–í—ã–±—Ä–∞–Ω–∞: {persona.name_ru} ‚Äî {persona.tagline_ru}.\n"
            "–ú–æ–∂–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å '—Å–µ–ª—Ñ–∏' ‚Äî —Å–∫–∞–∂–∏."
        )
    else:
        logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞ {persona_code} –æ—Ç {user_id}")
        await callback_query.answer("Ge√ßersiz se√ßim / –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


@dp.message(F.web_app_data)
async def on_webapp_data(message: Message):
    user_id = message.from_user.id
    logger.info(f"üì± WebApp –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        data = message.web_app_data.data
        import json
        payload = json.loads(data)
        code = str(payload.get("persona", "")).lower()
        logger.info(f"   –í—ã–±—Ä–∞–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞: {code}")
        
        persona = get_persona(code)
        if not persona:
            logger.warning(f"‚ö†Ô∏è –ü–µ—Ä—Å–æ–Ω–∞ {code} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {user_id}")
            await message.answer(
                "Se√ßim anla≈üƒ±lamadƒ±. L√ºtfen tekrar deneyin.\n\n–í—ã–±–æ—Ä –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
            )
            return
        db_set_persona(str(message.from_user.id), persona.code)
        logger.info(f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞ {code} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ WebApp –¥–ª—è {user_id}")
        
        await message.answer(
            (
                f"Se√ßildi: {persona.name_tr} ‚Äî {persona.tagline_tr}.\n"
                "Sohbete ba≈ülayabiliriz! 'selfie' istersen s√∂yle.\n\n"
                f"–í—ã–±—Ä–∞–Ω–∞: {persona.name_ru} ‚Äî {persona.tagline_ru}.\n"
                "–ú–æ–∂–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å '—Å–µ–ª—Ñ–∏' ‚Äî —Å–∫–∞–∂–∏."
            ),
            reply_markup=webapp_keyboard(),
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebApp –¥–∞–Ω–Ω—ã—Ö –æ—Ç {user_id}: {e}", exc_info=True)
        await message.answer(
            "Bir hata olu≈ütu, tekrar dener misin?\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )


@dp.message()
async def on_message(message: Message):
    user_id = str(message.from_user.id)
    user_text = message.text or ""
    logger.info(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_text[:50]}...")
    
    code = db_get_persona(user_id)
    if not code:
        logger.info(f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞")
        await message.answer(
            "√ñnce bir kƒ±z se√ß.\n\n–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–µ–≤—É—à–∫—É.",
            reply_markup=persona_selection_keyboard(),
        )
        return
    
    persona = get_persona(code)
    assert persona is not None
    logger.info(f"üë§ –¢–µ–∫—É—â–∞—è –ø–µ—Ä—Å–æ–Ω–∞ –¥–ª—è {user_id}: {persona.code}")

    if any(k in user_text.lower() for k in ["selfie", "—Å–µ–ª—Ñ–∏", "foto", "—Ñ–æ—Ç–æ"]):
        logger.info(f"üì∏ –ó–∞–ø—Ä–æ—Å —Å–µ–ª—Ñ–∏ –æ—Ç {user_id}")
        prompt = (
            f"{persona.name_tr} stilinde, {persona.tagline_tr} havasƒ±nda bir selfie."
            " Doƒüal ƒ±≈üƒ±k, portre."
        )
        try:
            data_uri = await flux_service.generate_photo_data_uri(prompt)
            if data_uri:
                logger.info(f"‚úÖ –°–µ–ª—Ñ–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è {user_id}")
                await message.answer(
                    "ƒ∞≈üte istediƒüin selfie!\n\n–í–æ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ —Å–µ–ª—Ñ–∏!"
                )
                await message.answer_photo(photo=data_uri)
            else:
                logger.warning(f"‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–ª—Ñ–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è {user_id}")
                await message.answer(
                    "≈ûu anda foto √ºretimi hazƒ±r deƒüil. Yakƒ±nda aktif olacak.\n\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –°–∫–æ—Ä–æ –≤–∫–ª—é—á–∏–º."
                )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ–ª—Ñ–∏ –¥–ª—è {user_id}: {e}", exc_info=True)
            await message.answer(
                "≈ûu anda foto √ºretimi hazƒ±r deƒüil. Yakƒ±nda aktif olacak.\n\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –°–∫–æ—Ä–æ –≤–∫–ª—é—á–∏–º."
            )
        return

    add_message(user_id, "user", user_text)
    history = get_recent_messages(user_id)
    messages = [{"role": r, "content": c} for r, c in history]

    try:
        logger.info(f"üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ GPT –¥–ª—è {user_id}...")
        reply = await asyncio.to_thread(gpt_service.generate_reply, persona, messages)
        logger.info(f"‚úÖ GPT –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –¥–ª—è {user_id}: {reply[:50]}...")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ GPT –¥–ª—è {user_id}: {e}", exc_info=True)
        reply = (
            "≈ûu anda yanƒ±t √ºretirken bir sorun oldu, birazdan tekrar dene.\n\n"
            "–°–µ–π—á–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ."
        )

    add_message(user_id, "assistant", reply)
    await message.answer(reply)
    logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")


async def main() -> None:
    # Ensure console can handle non-ASCII without crashing on Windows
    try:
        sys.stdout.reconfigure(encoding="utf-8", errors="ignore")
    except Exception:
        pass
    
    logger.info("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    try:
        init_db()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}", exc_info=True)
        raise
    
    # Get bot info and show startup message
    try:
        logger.info("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ...")
        bot_info = await bot.get_me()
        logger.info("=" * 70)
        logger.info("‚úÖ HayalKiz Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω / Uspeshno zapushchen")
        logger.info(f"   Bot: @{bot_info.username}")
        logger.info(f"   Bot ID: {bot_info.id}")
        logger.info(f"   WebApp URL: {settings.webapp_url}")
        logger.info("=" * 70)
        logger.info("üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ / Ispolzovanie:")
        logger.info("   1. –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram / Otkroyte bota v Telegram")
        logger.info("   2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start / Otpravte /start")
        logger.info("   3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É Mini App / Nazhmite knopku Mini App")
        logger.info("   4. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–≤—É—à–∫—É –∏ –æ–±—â–∞–π—Ç–µ—Å—å / Vyberite devushku i obshchaytes'")
        logger.info("=" * 70)
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
        logger.error("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TELEGRAM_BOT_TOKEN –≤ —Ñ–∞–π–ª–µ keys.env")
        raise
    
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ polling...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è polling: {e}", exc_info=True)
        raise


if __name__ == "__main__":
    asyncio.run(main())
