import asyncio
import logging
import sys
import uvicorn
from fastapi import FastAPI
from app.main import main as bot_main

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# Minimal health-check HTTP server
app = FastAPI()

@app.get("/")
@app.get("/health")
async def health():
    return {"status": "ok", "service": "hayalkiz-bot"}


async def run_bot():
    """Run the Telegram bot"""
    try:
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        await bot_main()
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –±–æ—Ç–µ: {e}", exc_info=True)
        # Don't exit, let health server continue running
        logger.warning("‚ö†Ô∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ health-—Å–µ—Ä–≤–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É")


async def run_web():
    """Run the health-check web server"""
    try:
        logger.info("üåê –ó–∞–ø—É—Å–∫ health-check —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 8000...")
        config = uvicorn.Config(
            app, 
            host="0.0.0.0", 
            port=8000, 
            log_level="info",
            access_log=True
        )
        server = uvicorn.Server(config)
        await server.serve()
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ health-—Å–µ—Ä–≤–µ—Ä–µ: {e}", exc_info=True)
        raise


async def main():
    """Run both bot and health server concurrently"""
    logger.info("=" * 70)
    logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø HAYALKIZ")
    logger.info("=" * 70)
    
    try:
        await asyncio.gather(
            run_bot(),
            run_web(),
            return_exceptions=True
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}", exc_info=True)
        raise


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}", exc_info=True)
        sys.exit(1)
